---
title: "Registros de presencia de especies Bufonidae en Costa Rica"
author: "Irina Pérez Lescano | Ashly Salas Chavez"
format: dashboard
theme: minty
server: shiny
---

```{r}
#| label: carga-paquetes
#| context: setup

library(tidyverse)
library(sf)
library(DT)
library(plotly)
library(leaflet)
library(leaflet.extras)
library(leafem)
library(hrbrthemes)
library(viridisLite)
library(shiny)
library(dplyr)
```


```{r}
#| label: carga-union-datos
#| context: data


# CARGA DE DATOS

# Registros de presencia
registros <-
  st_read(
    dsn = "registros-bufonidae.csv",
    options = c(
      "X_POSSIBLE_NAMES=decimalLongitude",
      "Y_POSSIBLE_NAMES=decimalLatitude"
    ),
    quiet = TRUE
  )
# Asignación del CRS WGS84 al objeto registros
st_crs(registros) <- 4326

# Para asegurarse de que la columna age sea numérica
registros$month <- as.integer(registros$month)

# Especies
especies <-
  read_csv("especies-anfibios.csv")

# Areas
areas <-
  st_read("areas-conservacion.gpkg", quiet = TRUE)


# UNIONES DE DATOS

# Registros de presencia + Especies
registros_union_especies <-
  left_join(
    x = registros,
    y = especies,
    by = "species"
  )

# Registros de presencia + Especies + Areas
registros_union_especies_areas <-
  st_join(
    x = registros_union_especies,
    y = dplyr::select(areas, nombre_ac),
    join = st_within
  )
```


# {.sidebar}

```{r}
#| label: panel-widgets-entrada


# Lista ordenada de especies
# con un elemento adicional = "Todas"
lista_especies <- unique(registros_union_especies_areas$species)
lista_especies <- sort(lista_especies)
lista_especies <- c("Todas", lista_especies)

# Widget de lista de selección de especies
selectInput(
  inputId = "especies",      # identificador del widget
  label = "Especies",        # etiqueta de la lista
  choices = lista_especies, # lista de opciones para seleccionar de la lista
  selected = "Todas"        # opción seleccionada por defecto
)

# Lista ordenada de areas
# con un elemento adicional = "Todas"
lista_areas <- unique(registros_union_especies_areas$nombre_ac)
lista_areas <- sort(lista_areas)
lista_areas <- c("Todas", lista_areas)

# Widget de lista de selección de areas
selectInput(
  inputId = "areas",      # identificador del widget
  label = "Áreas",        # etiqueta de la lista
  choices = lista_areas, # lista de opciones para seleccionar de la lista
  selected = "Todas"        # opción seleccionada por defecto
)

# Lista ordenada de areas
# con un elemento adicional = "Todas"
lista_categorias <- unique(registros_union_especies_areas$iucnRedListCategory)
lista_categorias <- sort(lista_categorias)
lista_categorias <- c("Todas", lista_categorias)

# Widget de lista de selección de la lista roja
selectInput(
  inputId = "categorias",      # identificador del widget
  label = "Categorias",        # etiqueta de la lista
  choices = lista_categorias, # lista de opciones para seleccionar de la lista
  selected = "Todas"        # opción seleccionada por defecto
)

# Widget deslizador de selección de mes
sliderInput(
  inputId = "mes",
  label = "Mes",
  min = 1,
  max = 12,
  value = c(1, 12)
)
```

# Lista de registros y gráfico de cantidad de registros por especie

```{r}
#| label: salida-tabla
#| title: "Lista de registros de presencia"


# Tabla interactiva
dataTableOutput(
	outputId =  "tabla" # identificador del widget
)
```


```{r}
#| label: salida-grafico
#| title: "Cantidad de registros de presencia por especie"


# Gráfico interactiva
plotlyOutput(
	outputId =  "grafico" # identificador del widget
)
```

# Mapa

```{r}
#| label: salida-mapa
#| title: "Distribución espacial de registros de presencia"


# Mapa interactivo
leafletOutput(
	outputId =  "mapa" # identificador del widget
)
```


```{r}
#| label: servidor
#| context: server

# Función reactiva para filtrar los registros de presencia
# de acuerdo con los filtros especificados por el usuario
filtrar_registros <- reactive({
  # Valor inicial del objeto que va a retornarse
  registros_filtrados <- registros_union_especies_areas
  
  # Se realiza el filtro, solamente si el usario ha seleccionado 
  # una opción diferente a "Todas" en la lista de selección de especies
  if (input$especies != "Todas") {
    registros_filtrados <-
      registros_filtrados |>
      filter(species == input$especies)}
  
  if (input$areas != "Todas") {
    registros_filtrados <-
      registros_filtrados |>
      filter(nombre_ac == input$areas)}
  
   if (input$categorias != "Todas") {
    registros_filtrados <-
      registros_filtrados |>
      filter(iucnRedListCategory == input$categorias)}
  
  # Filtros por mes maximo
  registros_filtrados <-
  registros_filtrados|>
    filter(month <= input$mes)
  
  
  return(registros_filtrados)
})

  

# Mapa interactivo de registros de presencia
output$mapa <- renderLeaflet({
	# Filtrado del conjunto de datos
  registros_union_especies_areas <- filtrar_registros()
  
  
  # Mapa interactivo
  leaflet() |>setView(
    lng = -84,
    lat = 10,
    zoom = 7) |>
  addTiles(group = "Mapa general (OpenStreetMap)") |>
  addProviderTiles(
    providers$Esri.WorldImagery, 
    group = "Imágenes satelitales (ESRI World Imagery)"
  ) |>
    addPolygons(
    data = areas,
    color = "purple",
    fillColor = "green",
    stroke = TRUE,
    weight = 2.0,
    popup = paste(
      paste("<strong>Area de Coservación:</strong>", areas$nombre_ac), sep = '<br/>'
    ),
    group = "Areas de conservacion"
  ) |>
  addScaleBar(
    position = "bottomleft", 
    options = scaleBarOptions(imperial = FALSE)
  ) |>
    addCircleMarkers(
      data = registros_union_especies_areas,
      radius = 2,
      color = "navy",
      fillOpacity = 2.0,
      stroke = F,
      popup = paste(
        paste0("<strong>Especie</strong>: ", registros_union_especies_areas$species),
        paste0("<strong>Lista roja</strong>: ", registros_union_especies_areas$iucnRedListCategory),
        paste0("<strong>Área de conservación</strong>: ", registros_union_especies_areas$nombre_ac),
         paste0("<strong>Fecha</strong>: ", registros_union_especies_areas$eventDate),
        sep = "<br>"
      ),    
    group = "Registros de presencia"
    ) |> 
  addLayersControl(
    baseGroups = c(
      "Mapa general (OpenStreetMap)", 
    "Imágenes satelitales (ESRI World Imagery)"
    ),
    overlayGroups = c(
      "Areas de conservacion",
      "Registros de presencia"
    )
  )|>
  addResetMapButton() |>
  addSearchOSM() |>
  addMouseCoordinates() |>
  addFullscreenControl() |>
  addMiniMap(position = "bottomleft") |>
  hideGroup("Registros de presencia") 
  
})


# Tabla interactiva de registros de presencia
output$tabla <- renderDataTable({
  # Filtrado del conjunto de datos
  registros_union_especies_areas <- filtrar_registros()
  
  # Tabla interactiva
  registros_union_especies_areas |>
    st_drop_geometry() |>
    select(species, iucnRedListCategory, nombre_ac, eventDate) |>
    datatable(
      rownames = FALSE,
      colnames = c("Especie", "Categoria en la Lista Roja", "Area de Conservacion","Fecha"),
      options = list(
        pageLength = 10,
        language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
      )
    )
})


# Gráfico interactivo de registros de presencia por especie
output$grafico <- renderPlotly({
  # Filtrado del conjunto de datos
  registros_union_especies_areas <- filtrar_registros()
  
  grafico_ggplot2 <-
    registros_union_especies_areas |>
    st_drop_geometry() |>
    group_by(nombre_ac) |>
    summarize(n = n()) |>
   arrange(desc(n)) |>
    ggplot(aes(x = reorder(nombre_ac, -n),
               y = n)) +
    geom_col(
      aes(
      text = paste0(
        "Area de conservación: ",nombre_ac, "\n",
        "Registro de especies: ", n
      )),
    ) +
    xlab("Areas de conservacion") +
    ylab("Cantidad de registros") +
    theme_light() +
    theme(axis.text.x = element_text(angle = 20))
  
  ggplotly(grafico_ggplot2, tooltip = "text") |> config(locale = "es")
  
})
```